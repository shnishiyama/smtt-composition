steps:
  - simple_align:
      cases: true
      top_level_patterns: true
      records: true

  - imports:
      align: global
      list_align: after_alias
      pad_module_names: true
      long_list_align: inline
      empty_list_align: inherit
      list_padding: 4
      separate_lists: true
      space_surround: false

  - language_pragmas:
      style: vertical
      align: true
      remove_redundant: true

  - trailing_whitespace: {}

columns: 80

newline: native

language_extensions:
  # use satt-prelude
  - NoImplicitPrelude

  # performance supports
  - BangPatterns
  - EmptyCase
  - StrictData

  # useful syntaxes
  - Arrows
  - BinaryLiterals
  - DefaultSignatures
  # for Cabal 2.0.x
  #- DerivingStrategies
  - FlexibleContexts
  - FlexibleInstances
  - InstanceSigs
  - LambdaCase
  - MultiWayIf
  - NamedFieldPuns
  - NegativeLiterals
  - PatternSynonyms
  - RecordWildCards
  - RecursiveDo
  - StandaloneDeriving
  - TupleSections
  - ViewPatterns

  # useful derivable
  - GeneralizedNewtypeDeriving
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DeriveAnyClass

  # extensions of type systems
  - ConstraintKinds
  - DataKinds
  - FunctionalDependencies
  - GADTs
  - PolyKinds
  - RankNTypes
  - RoleAnnotations
  - ScopedTypeVariables
  - TypeApplications
  - TypeFamilies
  - TypeFamilyDependencies
  - TypeOperators

  # for stylish-haskell
  - MultiParamTypeClasses
